{
  "name": "Secsoft",
  "tagline": "Alp's Secure Software excercises",
  "body": "### Welcome to Secure Software Design\r\nThis cybersecurity course introduce the theory and practices used to help make a computer program secure and provide the skills needed to implement programs that are free from vulnerabilities. There are 5 projects implemented in this course work.\r\n\r\n### Summary of Skill sets which are utilized in this work\r\nC/C++, python, Sqlite, Php, HTML/CSS, Javascript, JQuery\r\n\r\n* Experienced in Advanced Cryptography\r\n* Experienced in Web Deployment\r\n* Experienced in Secure Software Design\r\n* Experienced in Code Analysis and Debug\r\n* Risk assessment at a CERT level\r\n* Practical awareness of the types of attacks\r\n* Ability to fix problems/bugs/vulnerabilities etc\r\n* Ability to find problems which needs to be fixed\r\n\r\n\r\n### First project: Markovian-tweets\r\n**Project Requirements:** Consume a text file with sentences and produce a tweet (< 145 characters) with the style of the input text.\r\n\r\n1. **Level 1:** does the base Markov Sentence Generation from the sample text.\r\n2. **Layer 2:** if you've got web skills on your team: Consume a Twitter username and create a sample of that person's tweets, then generate a tweet in their style. \r\n3. **Layer 3:** Create a bot which accepts username and tweets a message in that user's style.\r\n\r\n**Project Status:** Level 1, 2 & 3 are successfully implemented and functional.\r\n\r\n**Project Repository:** For more information [https://github.com/kkatayama/markov_tweets](https://github.com/kkatayama/markov_tweets)\r\n\r\n**Skill sets used in this project:** C/C++ (266 sLOC), python (54 sLOC)\r\n\r\n### Second project: Markovian-tweets (Red-team)\r\nWe get the code from a project 1 (a distinct team). We hunted for exploits and weaknesses from the SEI CERT C Coding Standard and/or CERT C++ Coding Standard found: [https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards](https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards). We specifically looked for weaknesses, exploits, or proper protections that the developers used from the MEM and STR families of rules and recommendations.\r\n\r\n**Project Status:** We examined the source code provided by another team and found some good and bad practices.\r\n\r\n**Project Report:** To read more about this project, see [report.htm](https://github.com/alparslansari/secsoft/blob/master/project2/report.htm)\r\n\r\n**Skill sets used in this project:** Code analysis, risk analysis on given source code.\r\n\r\n### Third project: Command-Line Minesweeper\r\n**Project Requirements:** Write a function which consumes three arguments width height number_of_mines and generates a Minesweeper board internally. The board is a rectangle with a cover over each square. It will display this board to the user and prompt for a coordinate where they predict that no mine exists (format: x-coord y-coord 0-indexed). If they struck a mine then they lose (let them know). Otherwise uncover the selected square. If there are no adjacent mines then it should be blank and you uncover all adjacent squares too (chain-react this for every blank square). Otherwise show the number of mines in the surrounding 8 squares. If at some point only mines are covered then the user wins and the game ends. Extra levels for (first click always blank) and the ability to flag mines.\r\n\r\n**Project Status:** All of the project requirements are implemented successfully. We analyzed and identified risks for our own project and patched the vulnerabilities. \r\n\r\n[Opponent Code]( https://github.com/samkossey/project_3_blue.git) is also analyzed by us and possible vulnerabilities are exploited. \r\n\r\n\r\n**Project Repository:** See [https://github.com/alparslansari/minesweeper-nogui](https://github.com/alparslansari/minesweeper-nogui)\r\n\r\n**Skill sets used in this project:** C/C++ (720 sLOC)\r\n\r\n### Fourth project: Gee-Mail - a secure asynchronous message platform\r\n**Project Requirements:** Write a secure asynchronous (same-machine) message platform.\r\n\r\n* When loaded prompt the user to sign-in or register. \r\n* When a user registers get their username and password. \r\n* When a user logs in ask for username and validate password.\r\n* If login fails, choose your response. \r\n* Once logged in, tell them the number of messages they have, list the users that have sent them a message. (You can limit this to one message from a given sender or add a timestamp or even a title to messages if you want a level 2.) \r\n* Then ask if they want to read messages or write messages. \r\n* When writing messages prompt them for the receipient username, the message, and a shared passphrase with that receipient. \r\n* When they read a message let them select the message somehow, then prompt them for the shared passphrase with that receipient, then show a plaintext message. \r\n* **IMPORTANT:** do not ever store passwords, messages, or passphrases in plaintext, this is an encrypted messaging system. The rule sets in play for this stage are FIO and ERR.\r\n\r\n**Project Status:** All of the project requirements are implemented successfully. We analyzed and identified risks for our own project and patched the vulnerabilities. We designed the project in a modular way. All core functions stayed in our GeeMail libraries so desktop version of the project and web based project are used same libraries. We utilized many good practices of software engineering techniques and methodologies in this project. Moreover, high level cryptography is implemented in this project.\r\n\r\n\r\nPart 2, we found several vulnerabilities and were able to exploit them. To read more [see the report](https://github.com/alparslansari/secsoft/tree/master/project4)\r\n\r\n**Project Repository:** See desktop version [https://github.com/kkatayama/Gee-Mail](https://github.com/kkatayama/Gee-Mail)\r\n\r\nSee web based api [https://github.com/alparslansari/gee-web-mail](https://github.com/alparslansari/gee-web-mail)\r\n\r\n**Skill sets used in this project:** C/C++ (502 sLOC), Php (696 sLOC), HTML/CSS/JS, JQuery, Advanced Cryptography\r\n\r\n### Authors and Contributors\r\nI am Alparslan Sari (@alparslansari) contributed in all projects. Participated design of the software, coded modules, and tested our codes etc. My other team members are Teddy Katayama (@kkatayama) and Zhou Kevin (@KevinZhou92)\r\n\r\n**To see Teddy's (@kkatayama) accomplishments with me, see his awesome page:** [https://secsoft.github.io/](https://secsoft.github.io/)\r\n\r\n**Note:** _sLOC:_ source lines of code\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}